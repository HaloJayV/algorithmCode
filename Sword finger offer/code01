* [数组中只出现一次的数字](https://www.nowcoder.com/practice/389fc1c3d3be4479a154f63f495abff8?tpId=13&tqId=11193&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 一个整型数组里除了两个数字只出现一次，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。

    ```
    import java.util.*;
    
    public class Solution {
        public int[] FindNumsAppearOnce (int[] array) {
            int[] res = new int[2];
            int x = array[0];
            // 先进行异或，结果是两个单独的数异或的结果
            // 假如array为[1,4,1,6]，则 x = 4 ^ 6 = 010
            for (int i = 1; i < array.length; ++i) {
                x ^= array[i];
            }
            // 寻找二进制中最右边的 1 的那个位
             // 两个单独出现的数字若在 m 位相异，则在 x 中 m 位数为1
            // x中不为0的位，与 1 进行与运算结果不变      
            // 从 x 的右边开始寻找到 x 第一个为 1 的位 m，才退出循环
            x -= x & (x - 1);
            //根据第m位的值将原数组分为两组，单独出现的两个数字分在不同的组
            for (int i = 0; i < array.length; ++i) {
                if((x & array[i]) == 0) {
                    // 根据他们是 1 还是 0，来分配在数组 res 中的位置
                    res[0] ^= array[i];
                } else {
                    res[1] ^= array[i];
                }
            }
            if(res[0] > res[1]) {
                int temp = res[0];
                res[0] = res[1];
                res[1] = temp;
            }      
            return res;
        }
    }
    ```

* [和为S的正数序列](https://www.nowcoder.com/practice/c451a3fd84b64cb19485dad758a55ebe?tpId=13&tqId=11194&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序

    ```
    import java.util.ArrayList;
    public class Solution {
        public ArrayList<ArrayList<Integer>> FindContinuousSequence(int sum) {
            ArrayList<ArrayList<Integer>> res = new ArrayList<>();
            // 窗口的左右分界元素
            int lo = 1, hi = 2;           
            while(lo < hi) {
                // 等差数列求和
                int cur = (lo + hi) * (hi - lo + 1) / 2;
                if(cur == sum) {
                    // 相等则加入结果
                    ArrayList<Integer> list = new ArrayList<>();
                    for(int i = lo; i <= hi; i++) {
                        list.add(i);
                    }               
                    res.add(list);
                    // 继续滑动窗口，寻找可能的结果
                    lo++;
                } else if(cur > sum) {
                    // 大于则需要lo++，缩小窗口
                    lo++;
                } else {
                    // 小于sum就需要hi++增大窗口
                    hi++;
                }
            }
            return res;
        }
    }
    ```

* [和为S的两个数字](https://www.nowcoder.com/practice/390da4f7a00f44bea7c2f3d19491311b?tpId=13&tqId=11195&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。

    ```
    import java.util.ArrayList;
    public class Solution {
        public ArrayList<Integer> FindNumbersWithSum(int [] array,int sum) {
            ArrayList<Integer> res = new ArrayList<>();
            if(array.length == 0) {
                return res;
            } 
            int lo = 0, hi = array.length - 1;
            // 从左右开始向中间推进
            while(lo < hi) {
                if(array[lo] + array[hi] == sum) {
                    res.add(array[lo]);
                    res.add(array[hi]);
                    // 遇到第一个等于结果的，一定是最小的，因为数组有序
                    return res;
                } else if(array[lo] + array[hi] > sum) {
                    hi--;
                } else {
                    lo++;
                }
            }
            return res;
        }
        
    }
    ```

* [左旋转字符串](https://www.nowcoder.com/practice/12d959b108cb42b1ab72cef4d36af5ec?tpId=13&tqId=11196&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”

    ```
    public class Solution {
        public String LeftRotateString(String str,int n) {
            int len = str.length();
            if(len == 0) {
                return "";
            }
            n = n % len;
            str += str;
            return str.substring(n, len + n);
        }
    }
    ```

* [翻转单词顺序列](https://www.nowcoder.com/practice/3194a4f4cf814f63919d0790578d51f3?tpId=13&tqId=11197&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“student. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a student.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？

    ```
    public class Solution {
        public String ReverseSentence(String str) {
            if(str.length() == 0) {
                return "";
            }
            String[] arr = str.split(" ");
            // 都是空格，直接返回即可
            if(arr.length == 0) {
                return str;
            }
            int len = arr.length;
            StringBuilder sb = new StringBuilder();
            while(--len >= 0) {
                // 从最后一个元素开始遍历到第一个元素，添加结果
                sb.append(arr[len] + " ");
            }        
            sb.deleteCharAt(sb.length() - 1);
            return sb.toString();
        }
    }
    ```

* [扑克牌顺子](https://www.nowcoder.com/practice/762836f4d43d43ca9deb273b3de8e1f4?tpId=13&tqId=11198&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)...他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子.....LL不高兴了,他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。为了方便起见,你可以认为大小王是0。

    ```
    public class Solution {
        public boolean IsContinuous(int [] numbers) {
            if(numbers.length != 5) {
                return false;
            } 
            // 只要 max - min < 5 && 除了0其他数只能有一个
            int min = 14, max = -1, num = 0, bitmap = 0;
            for(int i = 0; i < numbers.length; i++) {
                num = numbers[i];
                if(num < 0 || num > 13) {
                    return false;
                } else if(num == 0) {
                    continue;
                } else {
                    // 1 到 13
                    // bitmap来判断是否重复
                    if(((bitmap >> num) & 1) == 1) {
                        return false;
                    }
                    // bitmap位操作记录num
                    bitmap |= 1 << num;
                    min = Math.min(min, num);
                    max = Math.max(max, num);
                    if(max - min >= 5) {
                        return false;
                    }
                }
            }
            return true;
        }
    }
    ```

* [孩子们的游戏](https://www.nowcoder.com/practice/f78a359491e64a50bce2d89cff857eb6?tpId=13&tqId=11199&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0...m-1报数....这样下去....直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)

    ```
    import java.util.LinkedList;
    public class Solution {
        public int LastRemaining_Solution(int n, int m) {
            if(n < 1 || m < 1) {
                return -1;
            }
            // 用链表实现
            LinkedList<Integer> list = new LinkedList<>();
            for(int i = 0; i < n; i++) {
                list.addLast(i);
            }
            int step = 0;
            // 最后剩下一个不需要操作，因此只需要进行n-1次游戏
            while(list.size() > 1) {
                // 每次step从原来被删除的位置开始(第一次从0开始走)，重新在环形链表走m-1步
                step = (step + m - 1) % list.size();
                list.remove(step);
            }
            return list.getLast();
        }
    }
    ```

* [求 1+2+3+。。。+n](https://www.nowcoder.com/practice/7a0da8fc483247ff8800059e12d7caf1?tpId=13&tqId=11200&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 求1+2+3+...+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）

    ```
    public class Solution {
        public int Sum_Solution(int n) {
            int res = n;
            // 逻辑与，两个都为真结果才是true
            // 当res == n 递归到res == 0才递归结束
            boolean flag = (res > 0) && ((res += Sum_Solution(n - 1)) > 0);
            return res;
        }
    }
    ```

* [不用加减乘除做加法](https://www.nowcoder.com/practice/59ac416b4b944300b617d4f7f111b215?tpId=13&tqId=11201&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。

    ```
    public class Solution {
        public int Add(int num1,int num2) {
            // 进位位0则跳出循环
            while(num2 != 0) {
                // 如num1 == 5 == 101，num2 == 7 == 111， 结果是   1100
                // 不算进位，单纯每个位相加，使用异或实现
                // temp = 010
                int temp = num1 ^ num2;
                // 只计算进位, ·相当于与运算后左移1位
                // sum2 = 1010
                num2 = (num1 & num2) << 1;
                // 保存结果
                num1 = temp;
            }
            return num1;
        }
    }
    ```

* [把字符串转换成整数](https://www.nowcoder.com/practice/1277c681251b4372bdef344468e4f26e?tpId=13&tqId=11202&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 将一个字符串转换成一个整数，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0

    ```
    public class Solution {
        public int StrToInt(String str) {
            if(str.isEmpty()) {
                return 0;
            }
            // 记录符号
            int symbol = 1;
            char[] arr = str.toCharArray();
            if(arr[0] == '-'){
                symbol = -1;
                arr[0] = '0';
            } else if(arr[0] == '+') {
                symbol = 1;
                // 后面直接减去 '0'
                arr[0] = '0'; 
            }
            int sum = 0;        
            for(int i = 0; i < arr.length; i++) {
                if(arr[i] < '0' || arr[i] > '9') {
                    // 字母直接返回
                    return 0;                
                }
                sum = sum * 10 + arr[i] - '0';
            }
            return sum * symbol;
        }
    }
    ```

* [数组中重复的数字](https://www.nowcoder.com/practice/6fe361ede7e54db1b84adc81d09d8524?tpId=13&tqId=11203&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任一一个重复的数字。 例如，如果输入长度为7的数组[2,3,1,0,2,5,3]，那么对应的输出是2或者3。存在不合法的输入的话输出-1

    ```
    import java.util.*;
    
    
    public class Solution {
        /**
         * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
         *
         * 
         * @param numbers int整型一维数组 
         * @return int整型
         */
        public int duplicate (int[] numbers) {
            // write code here
            if(numbers.length == 0) {
                return -1;
            }
            Set<Integer> set = new HashSet<>();
            int res = 0, sum = 0;
            for(int num : numbers) {
                if(set.contains(num)) {
                    return num;
                } else {
                    set.add(num);
                }
            }
            return -1;
        }
    }
    ```

* [构建乘积数组](https://www.nowcoder.com/practice/94a4d381a68b47b7a8bed86f2975db46?tpId=13&tqId=11204&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 给定一个数组A[0,1,...,n-1],请构建一个数组B[0,1,...,n-1],其中B中的元素B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]。不能使用除法。（注意：规定B[0] = A[1] * A[2] * ... * A[n-1]，B[n-1] = A[0] * A[1] * ... * A[n-2];）

    对于A长度为1的情况，B无意义，故而无法构建，因此该情况不会存在。

    ```
    import java.util.ArrayList;
    public class Solution {
        public int[] multiply(int[] A) {
            int len = A.length;
            int[] res = new int[len];
            if(len == 0) {
                return res;            
            }
            // 只要将左上到右下的对角线设置为1
            res[0] = 1;
            // 先算左下角部分
            for(int i = 1; i < len; i++) {
                res[i] = res[i - 1] * A[i - 1];
            }
            // 从右下角开始，保存每次累乘的右上部分的结果
            int temp = 1;
            // 再算右上角部分
            for(int i = len - 2; i >= 0; i--) {
                // 右上角部分，从右下角开始向上计算
                temp *= A[i + 1];
                // 两部分连接
                res[i] *= temp;
            }
            return res;        
        }
    }
    ```

* [正则表达式匹配](https://www.nowcoder.com/practice/28970c15befb4ff3a264189087b99ad4?tpId=13&tqId=11205&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 请实现一个函数用来匹配包括'.'和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但是与"aa.a"和"ab*a"均不匹配

    ```
    import java.util.*;
    
    
    public class Solution {
        /**
         * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
         *
         * 
         * @param str string字符串 
         * @param pattern string字符串 
         * @return bool布尔型
         */
        public boolean match (String str, String pattern) {
            if(pattern.length() == 0) {
                return str.length() == 0;
            }
            // pattern第一个字符是否匹配
            boolean mat = (str.length() > 0 && (str.charAt(0) == pattern.charAt(0) || pattern.charAt(0) == '.'));
            // pattern包含 *
            if(pattern.length() > 1 && pattern.charAt(1) == '*') {
                // 0个或多个
                // 递归
                return match(str, pattern.substring(2)) || (mat && match(str.substring(1), pattern));
            } else {
                // 没有 *，继续递归
                return mat && match(str.substring(1), pattern.substring(1));
            }
        }
    }
    ```

* [字符流中第一个不重复字符](https://www.nowcoder.com/practice/00de97733b8e4f97a3fb5c680ee10720?tpId=13&tags=&title=&diffculty=0&judgeStatus=0&rp=1&tab=answerKey)

  * 请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符"go"时，第一个只出现一次的字符是"g"。当从该字符流中读出前六个字符“google"时，第一个只出现一次的字符是"l"。

    后台会用以下方式调用Insert 和 FirstAppearingOnce 函数

    ```
    import java.util.*;
    public class Solution {
        String str = "";
        Set<Character> set = new HashSet<>();
        public void Insert(char ch){
            if(set.contains(ch)) {
                // 重复出现就删除掉
                set.remove(ch);
            } else {
                // set只保留只出现一次的字符，且头元素是要求的结果
                set.add(ch);
            }
            str += Character.toString(ch);
        }
        // 输出str中第一个只出现一次的字符
        public char FirstAppearingOnce(){
            int len = str.length();
            for(char c : str.toCharArray()) {
                if(set.contains(c)) {
                    return c;
                }
            }
            return '#';
        }
    }
    ```

* [链表中环的入口节点](https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&tqId=11208&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。

    ```
    public class Solution {
    
        public ListNode EntryNodeOfLoop(ListNode pHead) {
            // 快慢指针实现
            // a为出发点到环入口长度，b为环长度
            // fast速度是slow 的两倍，当相遇时，设走过的路径长度为：
            // slow: s
            // fast: s + nb  fast比slow多走了n圈环      
            // 因为时间相同，fast速度为slow两倍，路径自然是slow的两倍
            // 因此：2s = s + nb, 即 s = nb，
            // 即第一次相遇时，slow走了nb步，fast走了2nb
            // 如果要走到环入口，需要走: a + nb，目前slow走了nb步了，需要再走a步就能走到环入口
            // 所以需要 fast重新从出发点每次走一步，slow则从第一次相遇点出发每次也走1步
            // 第二次相遇时，fast走了a步，slow也就走了a步了，刚好相遇
            ListNode slow = pHead, fast = pHead;
            while(true) {
                if(fast == null || fast.next == null) {
                    // fast先走到null表示无环
                    return null;
                }
                slow = slow.next;
                fast = fast.next.next;
                // 第一次相遇
                if(slow == fast) {
                    break;
                }
            }
            // fast从出发点重新开始
            fast = pHead;
            // 第二次相遇
            while(slow != fast) {
                slow = slow.next;
                fast = fast.next;
            }
            return slow;        
        }
    }
    ```

* [删除链表中重复的节点](https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef?tpId=13&tqId=11209&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1->2->3->3->4->4->5 处理后为 1->2->5

    ```
    public class Solution {
        public ListNode deleteDuplication(ListNode pHead) {
            if(pHead == null || pHead.next == null) {
                return pHead;
            }
            ListNode cur = pHead, prev;
            ListNode head = new ListNode(0);
            head.next = pHead;
            prev = head;
            // 非递归
            while(cur != null) {
                // 当前指针节点与下一个节点相等
                if(cur.next != null && cur.val == cur.next.val) {
                    while(cur.next != null && cur.val == cur.next.val) {
                        cur = cur.next;                
                    }
                    // 忽略掉中间有重复节点的cur节点
                    prev.next = cur.next;
                    // 
                    cur = cur.next;
                } else {
                    // 不相等
                    prev = prev.next;
                    cur = cur.next;
                }
            }
            return head.next;
        }
    }
    ```

* [二叉树的下一个节点](https://www.nowcoder.com/practice/9023a0c988684a53960365b889ceaf5e?tpId=13&tqId=11210&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。

    ```
    /*
    public class TreeLinkNode {
        int val;
        TreeLinkNode left = null;
        TreeLinkNode right = null;
        TreeLinkNode next = null;
    
        TreeLinkNode(int val) {
            this.val = val;
        }
    }
    */
    public class Solution {
        public TreeLinkNode GetNext(TreeLinkNode pNode) {
            if(pNode == null) {
                return null;
            }
            // 情况1：当前节点有右子树，那么下个节点就是右子树的最左叶子节点
            if(pNode.right != null) {
                pNode = pNode.right;
                // 遍历到pNode的最左叶子节点
                while(pNode.left != null) {
                    pNode = pNode.left;
                }
                return pNode;
            }
            // 当前节点不是根节点
            while(pNode.next != null) {
                TreeLinkNode parent = pNode.next;
                // 情况2：当前节点是左叶子节点，下个节点就是父节点
                if(parent.left == pNode) {
                    return parent;
                } else {
                    // 情况3：当前节点是右叶子节点，则下个节点是父节点以上的节点
                    pNode = pNode.next;
                }
            }
            return null;
        }
    }
    ```

* [对称的二叉树](https://www.nowcoder.com/practice/ff05d44dfdb04e1d83bdbdab320efbcb?tpId=13&tqId=11211&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 请实现一个函数，用来判断一棵二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。

    ```
    import java.util.*;
    public class Solution {
        boolean isSymmetrical(TreeNode pRoot) {
            if(pRoot == null) {
                return true;
            }
            return bfs(pRoot);
            
            
            // 左右递归
    //         return recursion(pRoot.left, pRoot.right); 
        }
       
        boolean bfs(TreeNode root) {
            if(root == null) {
                return true;
            }
            Queue<TreeNode> queue = new LinkedList<>();
            queue.add(root.left);
            queue.add(root.right);
            
            while(!queue.isEmpty()) {
                TreeNode left = queue.poll();
                TreeNode right = queue.poll();
                // dfs到底了，不进行比较
                if(left == null && right == null) {
                    continue;                
                }
                if(left == null || right == null || left.val != right.val) {
                    return false;                
                }
                queue.add(left.left);
                queue.add(right.right);
                queue.add(right.left);
                queue.add(left.right);
            }
            return true;        
        }
        
        // DFS
    //     boolean dfs(TreeNode root) {
    //         if(root == null) {
    //             return true;
    //         }
    //         Stack<TreeNode> stack = new Stack<>();
    //         stack.push(root.left);
    //         stack.push(root.right);
            
    //         while(!stack.empty()) {
    //             TreeNode right = stack.pop();
    //             TreeNode left = stack.pop();
    //             // dfs到底了，不进行比较
    //             if(left == null && right == null) {
    //                 continue;                
    //             }
    //             if(left == null || right == null || left.val != right.val) {
    //                 return false;                
    //             }
    //             stack.push(left.right);
    //             stack.push(right.left);
    //             stack.push(left.left);
    //             stack.push(right.right);
    //         }
    //         return true;        
    //     }
        
           // 递归法
    //     boolean recursion(TreeNode left, TreeNode right) {
    //         if(left == null && right == null) {
    //             return true;
    //         }
    //         if(left == null || right == null) {
    //             return false;
    //         }
    //         return left.val == right.val
    //             && recursion(left.left, right.right)
    //             && recursion(left.right, right.left);
    //     }
    }
    ```

* [按之字形顺序打印二叉树](https://www.nowcoder.com/practice/91b69814117f4e8097390d107d2efbe0?tpId=13&tqId=11212&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。

    ```
    import java.util.*;
    
    /*
    public class TreeNode {
        int val = 0;
        TreeNode left = null;
        TreeNode right = null;
    
        public TreeNode(int val) {
            this.val = val;
    
        }
    
    }
    */
    public class Solution {
        public ArrayList<ArrayList<Integer>> Print(TreeNode pRoot) {
            ArrayList<ArrayList<Integer>> res = new ArrayList<>();
            if(pRoot == null) {
                return res;
            }
            // 存放奇数层的节点
            Stack<TreeNode> stack1 = new Stack<>();
            stack1.push(pRoot);
            // 存放偶数层的节点
            Stack<TreeNode> stack2 = new Stack<>();
            // 表示当前遍历第几层，奇数则顺序打印，偶数逆序打印, 从第1层开始
            int level = 1; 
            while(!stack1.isEmpty() || !stack2.isEmpty()) {
                // 处理奇数层
                if(level % 2 != 0) {
                    ArrayList<Integer> list = new ArrayList<>();        
                    // 奇数层按顺序
                    while(!stack1.isEmpty()) {
                        TreeNode node = stack1.pop();
                        if(node != null) {
                            list.add(node.val);
                            // stack2保存偶数层节点
                            stack2.push(node.left);
                            stack2.push(node.right);
                        }
                    }
                    // 收集当前层的结果
                    if(!list.isEmpty()) {
                        res.add(list);
                        level++;
                    }                 
                } else {
                    // 处理偶数层
                    ArrayList<Integer> list = new ArrayList<>();        
                    while(!stack2.isEmpty()) {
                        TreeNode node = stack2.pop();
                        if(node != null) {
                            list.add(node.val);
                            // 需要按顺序push，因为stack1是用在奇数层按顺序输出结果的
                            stack1.add(node.right);
                            stack1.add(node.left);
                        }
                    }
                    if(!list.isEmpty()) {
                        res.add(list);
                        level++;
                    }
                }
            }        
            return res;
        }
    }
    ```

* [序列化二叉树](https://www.nowcoder.com/practice/cf7e25aa97c04cc1a68c8f040e71fb84?tpId=13&tqId=11214&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 请实现两个函数，分别用来序列化和反序列化二叉树

    二叉树的序列化是指：把一棵二叉树按照某种遍历方式的结果以某种格式保存为字符串，从而使得内存中建立起来的二叉树可以持久保存。序列化可以基于先序、中序、后序、层序的二叉树遍历方式来进行修改，序列化的结果是一个字符串，序列化时通过 某种符号表示空节点（#），以 ！ 表示一个结点值的结束（value!）。

    二叉树的反序列化是指：根据某种遍历顺序得到的序列化字符串结果str，重构二叉树。

    

    例如，我们可以把一个只有根节点为1的二叉树序列化为"1,"，然后通过自己的函数来解析回这个二叉树

    ```
    import java.util.*;
    public class Solution {
        String Serialize(TreeNode root) {
            // 层序遍历
            StringBuilder sb = new StringBuilder();
            Queue<TreeNode> queue = new LinkedList<TreeNode>();
            if(root != null) {
                queue.add(root);
            }
            while(!queue.isEmpty()) {
                TreeNode node = queue.poll();
                if(node != null) {
                    queue.offer(node.left);
                    queue.offer(node.right);
                    sb.append(node.val + ",");
                } else {
                    sb.append("#" + ",");
                }
            }
            if(sb.length() != 0) {
                // 删除掉最后一个
                sb.deleteCharAt(sb.length() - 1);
            }
            return sb.toString();        
        }
        TreeNode Deserialize(String str) {
            TreeNode root = null;
            if(str.length() == 0 || str == null) {
                return root;
            }
            String[] nodes = str.split(",");
            TreeNode[] treeNodes = new TreeNode[nodes.length];
            for(int i = 0; i < nodes.length; i++) {
                // 收集节点，而对于nodes[i]=="#", 则默认 treeNode[i] = null
                if(!nodes[i].equals("#")) {
                    treeNodes[i] = new TreeNode(Integer.valueOf(nodes[i]));
                }
            }
            // 拼接TreeNode节点
            for(int i = 0, j = 1; j < treeNodes.length; i++) {
                if(treeNodes[i] != null) {
                    treeNodes[i].left = treeNodes[j++];
                    treeNodes[i].right = treeNodes[j++];
                }
            }
            return treeNodes[0];        
        }
    }
    ```

* [二叉搜索树的第k个节点](https://www.nowcoder.com/practice/ef068f602dde4d28aab2b210e859150a?tpId=13&&tqId=11215&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)

  * 给定一棵二叉搜索树，请找出其中的第k小的TreeNode结点。

    ```
    import java.util.*;
    public class Solution {
        int cnt = 0;
        TreeNode KthNode(TreeNode root, int k) {
            if(root == null || k == 0) {
                return null;
            }
            Stack<TreeNode> stack = new Stack<>();
            while(root != null || !stack.empty()) {
                while(root != null) {
                    stack.push(root);
                    root = root.left;
                }
                root = stack.pop();
                cnt++;
                if(cnt == k) {
                    return root;
                }
                // 根节点左子树遍历完，开始遍历根节点的右子树
                root = root.right;
            } 
            return null;
        }
    }
        
    //     TreeNode KthNode(TreeNode pRoot, int k) {
    //         if(pRoot != null) {
    //             // 中序遍历, 一直递归到最左叶子节点
    //             TreeNode node = KthNode(pRoot.left, k);、
    //             // 当递归到pRoot 为最左叶子节点时，node为null
    //             if(node != null) {
    //                 return node;
    //             }
    //             // 从遍历到最左叶子节点开始计时，cnt==k就找到结果
    //             cnt++;
    //             if(cnt == k) {
    //                 return pRoot;
    //             }
    //             node = KthNode(pRoot.right, k);
    //             // 第一次递归到最右叶子节点时，pRoot 为该叶子节点，此时node 为null
    //             if(node != null) {
    //                 return node;
    //             } 
    //         }
    //         return null;
    //     }
    // }
    ```

* [数据流的中位数](https://www.nowcoder.com/practice/9be0172896bd43948f8a32fb954e1be1?tpId=13&tqId=11216&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。

    ```
    import java.util.PriorityQueue;
    import java.util.Comparator;
    
    public class Solution {
        // 小顶堆，存放较大的数
        private PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        // 大顶堆，存放较小的数, 定义为从大到小排序
        private PriorityQueue<Integer> maxHeap = new PriorityQueue<>(15, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2 - o1;
            }
        });
        // 记录数据流是偶数个还是奇数个
        int count = 0;
        public void Insert(Integer num) {
            // 插入前判断目前数据流是否为偶数个，偶数个才插入大顶堆，默认先插入大顶堆
            if(count % 2 == 0) {
                maxHeap.offer(num);
                // 取出大顶堆最大数然后放到小顶堆
                minHeap.offer(maxHeap.poll());
            } else {
                // 先插入小顶堆再将最小值插入大顶堆
                minHeap.offer(num);
                maxHeap.offer(minHeap.poll());
            }
            count++;
        }
    
        public Double GetMedian() {
            // 数据流为奇数个就取小顶堆最小值
            if(count % 2 == 0) {
                // 数据流为偶数个就分别去大顶堆和小顶堆的最大值和最小值除以2
                return new Double(maxHeap.peek() + minHeap.peek()) / 2;
            } else {
                return new Double(minHeap.peek());
            }
        }
    }
    ```

* [滑动窗口最大值](https://www.nowcoder.com/practice/1624bc35a45c42c0bc17d17fa0cba788?tpId=13&tqId=11217&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。

    窗口大于数组长度的时候，返回空

    ```
    import java.util.*;
    public class Solution {
        public ArrayList<Integer> maxInWindows(int[] num, int size) {
           
            // 双向队列作为窗口
            // 队头存放小的数组下标，队尾存放大的
            ArrayDeque<Integer> deque = new ArrayDeque<>();
            ArrayList<Integer> res = new ArrayList<>();
            if(size == 0) {
                return res;
            }
            int start;
            // i表示窗口的右边界下标
            for(int i = 0; i < num.length; i++) {
                 // 滑动窗口的起点坐标,从-1开始
                start = i - size + 1;
                // 队尾始终存放最大值
                if(deque.isEmpty()) {
                    // 保存下标
                    deque.add(i);
                } else if(start > deque.peekFirst()) {
                    // 起始下标大于队首，相当于缩小窗口
                    deque.pollFirst();                
                }
                // 当前窗口最右边元素 <= num[i]
                while(!deque.isEmpty() && num[deque.peekLast()] <= num[i]) {
                    // 保证deque队尾保存最大元素的下标
                    deque.pollLast();
                }
                // 添加窗口右边界下标i
                deque.addLast(i);
                // 队尾下标为最大的元素
                if(start >= 0) {
                    res.add(num[deque.peekFirst()]);
                }            
            }
            return res;
        }
    }
    ```

* [矩阵中的路径](https://www.nowcoder.com/practice/2a49359695a544b8939c77358d29b7e6?tpId=13&tqId=11218&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 \begin{bmatrix} a & b & c &e \\ s & f & c & s \\ a & d & e& e\\ \end{bmatrix}\quad⎣⎡*a**s**a**b**f**d**c**c**e**e**s**e*⎦⎤ 矩阵中包含一条字符串"bcced"的路径，但是矩阵中不包含"abcb"路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。

    ```
    import java.util.*;
    
    
    public class Solution {
        /**
         * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
         *
         * 
         * @param matrix char字符型二维数组 
         * @param word string字符串 
         * @return bool布尔型
         */
        int rows, cols;
        public boolean hasPath (char[][] matrix, String word) {
            rows = matrix.length;
            cols = matrix[0].length;
            if(rows == 0) {
                return false;
            }
            // 记录在当前位置是否走过, 默认都为false
            boolean[][] visited = new boolean[rows][cols];
            for(int i = 0; i < rows; i++) {
                for(int j = 0; j < cols; j++) {
                    if(dfs(matrix, i, j, visited, word, 0)) {
                        return true;
                    }
                }
            }
            return false;
        }
        
        // loc表示走到word第几个字符
        boolean dfs(char[][] matrix, int row, int col, boolean[][] visited, String word, int index) {
            // base case
            if(index == word.length()) {
                return true;
            }
            // 越界直接返回false
            if(row < 0 || row >= rows || col < 0 || col >= cols) {
                return false;
            }
            // 当前位置走过，直接false
            if(visited[row][col]) {
                return false;
            }
            // 开始dfs
            if(matrix[row][col] == word.charAt(index)) {
                visited[row][col] = true;
                // dfs 尝试向上下左右走
                if(dfs(matrix, row - 1, col, visited, word, index + 1)
                  || dfs(matrix, row + 1, col, visited, word, index + 1)
                  || dfs(matrix, row, col - 1, visited, word, index + 1)
                  || dfs(matrix, row, col + 1, visited, word, index + 1)) {
                    return true;
                }
                // 回溯，当前位置前后左右走不通，需要撤销走过的记录
                visited[row][col] = false;
            }
            return false;        
        }
    }
    ```

* [机器人的运动范围](https://www.nowcoder.com/practice/6e5207314b5241fb83f2329e89fdecc8?tpId=13&tqId=11219&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？

    ```
    public class Solution {
        int threshold;
        public int movingCount(int threshold, int rows, int cols) {
            // DFS
            this.threshold = threshold;
            int[][] flag = new int[rows][cols];
            return helper(0, 0, rows, cols, flag);
        }
        
        
        private int helper(int i, int j, int row, int col, int[][] flag) {
            if(i < 0 || i >= row || j < 0 || j >= col || flag[i][j] == 1 
               || numSum(i) + numSum(j) > threshold) {
                return 0;
            }
            flag[i][j] = 1; // 标记已经走过
            // 只需要先向下走再一层一层向右走，回溯
            return helper(i + 1, j, row, col, flag)
                    + helper(i, j + 1, row, col, flag) + 1;
        }
        
        private int numSum(int num) {
            int sum = 0;
            do {
                sum += num % 10;
            } while((num = num / 10) > 0);
            return sum;
        }
    }
    ```

* [剪绳子](https://www.nowcoder.com/practice/57d85990ba5b440ab888fc72b0751bf8?tpId=13&tqId=33257&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tab=answerKey)

  * 给你一根长度为n的绳子，请把绳子剪成整数长的m段（m、n都是整数，n>1并且m>1，m<=n），每段绳子的长度记为k[1],...,k[m]。请问k[1]x...xk[m]可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

    ```
    import java.util.*;
    public class Solution {
        int[] mark;
        public int cutRope(int target) {
            if(target == 2) {
                return 1;
            } else if(target == 3) {
                return 2;
            }
            // dp[i]表示当前长度为i时的最大乘积
            int[] dp = new int[target + 1];
            // 初始化
            for(int i = 1; i <= 4; i++) {
                dp[i] = i; // 1-4的最大乘积都是他本身
            }
            // 从5开始迭代到target
            for(int i = 5; i <= target; i++) {
                for(int j = 1; j < i; j++) {
                    dp[i] = Math.max(dp[i], dp[i-j] * j);
                }
            }       
            return dp[target];
        }
        
    //     // 递归函数，返回结果为：当前长度为n时最后分段的最大乘积
    //     int backTrack(int n, int[] mark) {
    //         // 暴力递归
    //         if(n <= 4) {
    //             return n;
    //         }
    //         // 回溯剪枝
    //         if(mark[n-1] != -1) {
    //             return mark[n-1];
    //         }
    //         int res = 0;
    //         for(int i = 1; i < n; i++) {
    //             res = Math.max(res, i * backTrack(n - i, mark));
    //         }
    //         mark[n-1] = res;
    //         return res;
    //     }
    }
    ```

    

